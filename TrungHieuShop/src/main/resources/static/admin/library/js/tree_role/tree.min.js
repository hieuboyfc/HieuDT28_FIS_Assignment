/*
 * Fuel UX Tree
 * https://github.com/ExactTarget/fuelux
 *
 * Copyright (c) 2014 ExactTarget
 * Licensed under the BSD New license.
 */
! function(e) {
    "function" == typeof define && define.amd ? define(["jquery"], e) : "object" == typeof exports ? module.exports = e(require("jquery")) : e(jQuery)
}(function(c) {
    function m(e, t, n) {
        t.addClass("tree-selected"), "item" === t.data("type") && n.hasClass(e.options["unselected-icon"]) && n.removeClass(e.options["unselected-icon"]).addClass(e.options["selected-icon"])
    }

    function h(e, t, n) {
        t.removeClass("tree-selected"), "item" === t.data("type") && n.hasClass(e.options["selected-icon"]) && n.removeClass(e.options["selected-icon"]).addClass(e.options["unselected-icon"])
    }
    var e = c.fn.tree,
        o = function(e, t) {
            this.$element = c(e), this.options = c.extend({}, c.fn.tree.defaults, t), this.options.itemSelect && this.$element.on("click.fu.tree", ".tree-item", c.proxy(function(e) {
                this.selectItem(e.currentTarget)
            }, this)), this.$element.on("click.fu.tree", ".tree-branch-header", c.proxy(function(e) {
                this.options.folderSelect || this.toggleFolder(e.currentTarget)
            }, this)), this.$element.on("click.fu.tree", ".tree-overflow", c.proxy(function(e) {
                this.populate(c(e.currentTarget))
            }, this)), this.options.folderSelect && (this.$element.addClass("tree-folder-select"), this.$element.off("click.fu.tree", ".tree-branch-name"), this.$element.on("click.fu.tree", ".icon-caret", c.proxy(function(e) {
                this.toggleFolder(c(e.currentTarget).next())
            }, this)), this.$element.on("click.fu.tree", ".tree-branch-header", c.proxy(function(e) {
                this.selectFolder(c(e.currentTarget))
            }, this))), this.render()
        };
    (o.prototype = {
        constructor: o,
        deselectAll: function(e) {
            e = e || this.$element;
            var t = c(e).find(".tree-selected"),
                n = this;
            return t.each(function(e, t) {
                h(n, c(t), c(t).find("." + c.trim(n.options["base-icon"]).replace(/(\s+)/g, ".")))
            }), t
        },
        destroy: function() {
            return this.$element.find("li:not([data-template])").remove(), this.$element.remove(), this.$element[0].outerHTML
        },
        render: function() {
            this.populate(this.$element)
        },
        populate: function(e, t) {
            var r = this,
                n = e.hasClass("tree-overflow"),
                o = e.hasClass("tree") ? e : e.parent(),
                l = o.hasClass("tree");
            n && !l && (o = o.parent());
            var s = o.data();
            n && (s.overflow = e.data()), t = t || !1, n && (l ? e.replaceWith(o.find("> .tree-loader").remove()) : e.remove());
            var i = o.find(".tree-loader:last");
            !1 === t && i.removeClass("hide hidden"), this.options.dataSource(s || {}, function(e) {
                c.each(e.data, function(e, t) {
                    var n;
                    if ("folder" === t.type) {
                        (n = r.$element.find("[data-template=treebranch]:eq(0)").clone().removeClass("hide hidden").removeData("template").removeAttr("data-template")).data(t), n.find(".tree-branch-name > .tree-label").html(t.text || t.name);
                        var s = n.find(".tree-branch-header");
                        "icon-class" in t && s.find("i").addClass(t["icon-class"]), "additionalParameters" in t && "item-selected" in t.additionalParameters && 1 == t.additionalParameters["item-selected"] && setTimeout(function() {
                            s.trigger("click")
                        }, 0)
                    } else "item" === t.type ? ((n = r.$element.find("[data-template=treeitem]:eq(0)").clone().removeClass("hide hidden").removeData("template").removeAttr("data-template")).find(".tree-item-name > .tree-label").html(t.text || t.name), n.attr("data-id", t.perid), n.data(t), "additionalParameters" in t && "item-selected" in t.additionalParameters && 1 == t.additionalParameters["item-selected"] && (n.addClass("tree-selected"), n.find("i").removeClass(r.options["unselected-icon"]).addClass(r.options["selected-icon"]))) : "overflow" === t.type && ((n = r.$element.find("[data-template=treeoverflow]:eq(0)").clone().removeClass("hide hidden").removeData("template").removeAttr("data-template")).find(".tree-overflow-name > .tree-label").html(t.text || t.name), n.data(t)), "true" === t.item_selected && n.addClass("tree-selected", n.find("i").removeClass(r.options["unselected-icon"]).addClass(r.options["selected-icon"]));
                    var i = t.attr || t.dataAttributes || [];
                    c.each(i, function(e, t) {
                        switch (e) {
                            case "cssClass":
                            case "class":
                            case "className":
                                n.addClass(t);
                                break;
                            case "data-icon":
                                n.find(".icon-item").removeClass().addClass("icon-item " + t), n.attr(e, t);
                                break;
                            case "id":
                                n.attr(e, t), n.attr("aria-labelledby", t + "-label"), n.find(".tree-branch-name > .tree-label").attr("id", t + "-label");
                                break;
                            default:
                                n.attr(e, t)
                        }
                    }), l ? o.append(n) : o.find(".tree-branch-children:eq(0)").append(n)
                }), o.find(".tree-loader").addClass("hidden"), r.$element.trigger("loaded.fu.tree", o)
            })
        },
        selectTreeNode: function(e, t) {
            var n = {};
            n.$element = c(e);
            var s, i, r, o, l, a, d = {};
            d.$elements = this.$element.find(".tree-selected"), d.dataForEvent = [], "folder" === t ? (n.$element = n.$element.closest(".tree-branch"), n.$icon = n.$element.find(".icon-folder")) : n.$icon = n.$element.find(".icon-item"), n.elementData = n.$element.data(), this.options.multiSelect ? (o = this, l = n, a = d, c.each(a.$elements, function(e, t) {
                var n = c(t);
                n[0] !== l.$element[0] && a.dataForEvent.push(c(n).data())
            }), l.$element.hasClass("tree-selected") ? (h(o, l.$element, l.$icon), a.eventType = "deselected") : (m(o, l.$element, l.$icon), a.eventType = "selected", a.dataForEvent.push(l.elementData))) : (s = this, i = n, (r = d).$elements[0] !== i.$element[0] ? (s.deselectAll(s.$element), m(s, i.$element, i.$icon), r.eventType = "selected", r.dataForEvent = [i.elementData]) : (h(s, i.$element, i.$icon), r.eventType = "deselected", r.dataForEvent = [])), this.$element.trigger(d.eventType + ".fu.tree", {
                target: n.elementData,
                selected: d.dataForEvent
            }), n.$element.trigger("updated.fu.tree", {
                selected: d.dataForEvent,
                item: n.$element,
                eventType: d.eventType
            })
        },
        discloseFolder: function(e) {
            var t = c(e).closest(".tree-branch"),
                n = t.find(".tree-branch-children"),
                s = n.eq(0);
            t.addClass("tree-open"), t.attr("aria-expanded", "true"), s.removeClass("hide hidden"), t.find("> .tree-branch-header .icon-folder").eq(0).removeClass(this.options["close-icon"]).addClass(this.options["open-icon"]), t.find("> .icon-caret").eq(0).removeClass(this.options["folder-open-icon"]).addClass(this.options["folder-close-icon"]), n.children().length || this.populate(n), this.$element.trigger("disclosedFolder.fu.tree", t.data())
        },
        closeFolder: function(e) {
            var t = c(e).closest(".tree-branch"),
                n = t.find(".tree-branch-children").eq(0);
            t.removeClass("tree-open"), t.attr("aria-expanded", "false"), n.addClass("hidden"), t.find("> .tree-branch-header .icon-folder").eq(0).removeClass(this.options["open-icon"]).addClass(this.options["close-icon"]), t.find("> .icon-caret").eq(0).removeClass(this.options["folder-close-icon"]).addClass(this.options["folder-open-icon"]), this.$element.trigger("closed.fu.tree", t.data())
        },
        toggleFolder: function(e) {
            $('.mCustomScrollbar').mCustomScrollbar();
            var t = c(e);
            t.find("." + c.trim(this.options["close-icon"]).replace(/(\s+)/g, ".")).length ? this.discloseFolder(e) : t.find("." + c.trim(this.options["open-icon"]).replace(/(\s+)/g, ".")).length && this.closeFolder(e)
        },
        selectFolder: function(e) {
            this.options.folderSelect && this.selectTreeNode(e, "folder")
        },
        selectItem: function(e) {
            this.options.itemSelect && this.selectTreeNode(e, "item")
        },
        selectedItems: function() {
            var e = this.$element.find(".tree-selected"),
                n = [];
            return c.each(e, function(e, t) {
                n.push(c(t).data())
            }), n
        },
        collapse: function() {
            var s = this,
                i = [];
            s.$element.on("closed.fu.tree", function e(t, n) {
                i.push(n), 0 === s.$element.find(".tree-branch.tree-open:not('.hidden, .hide')").length && (s.$element.trigger("closedAll.fu.tree", {
                    tree: s.$element,
                    reportedClosed: i
                }), s.$element.off("loaded.fu.tree", s.$element, e))
            }), s.$element.find(".tree-branch.tree-open:not('.hidden, .hide')").each(function() {
                s.closeFolder(this)
            })
        },
        discloseVisible: function() {
            var s = this,
                i = s.$element.find(".tree-branch:not('.tree-open, .hidden, .hide')"),
                r = [];
            s.$element.on("loaded.fu.tree", function e(t, n) {
                r.push(n), r.length === i.length && (s.$element.trigger("disclosedVisible.fu.tree", {
                    tree: s.$element,
                    reportedOpened: r
                }), s.$element.off("loaded.fu.tree", s.$element, e))
            }), s.$element.find(".tree-branch:not('.tree-open, .hidden, .hide')").each(function() {
                s.discloseFolder(c(this).find(".tree-branch-header"))
            })
        },
        discloseAll: function() {
            var e = this;
            void 0 === e.$element.data("disclosures") && e.$element.data("disclosures", 0);
            var t = 1 <= e.options.disclosuresUpperLimit && e.$element.data("disclosures") >= e.options.disclosuresUpperLimit;
            if (0 === e.$element.find(".tree-branch:not('.tree-open, .hidden, .hide')").length) e.$element.trigger("disclosedAll.fu.tree", {
                tree: e.$element,
                disclosures: e.$element.data("disclosures")
            }), e.options.cacheItems || e.$element.one("closeAll.fu.tree", function() {
                e.$element.data("disclosures", 0)
            });
            else {
                if (t && (e.$element.trigger("exceededDisclosuresLimit.fu.tree", {
                    tree: e.$element,
                    disclosures: e.$element.data("disclosures")
                }), !e.$element.data("ignore-disclosures-limit"))) return;
                e.$element.data("disclosures", e.$element.data("disclosures") + 1), e.$element.one("disclosedVisible.fu.tree", function() {
                    e.discloseAll()
                }), e.discloseVisible()
            }
        },
        refreshFolder: function(e) {
            var t = e.closest(".tree-branch"),
                n = t.find(".tree-branch-children");
            n.eq(0).empty(), t.hasClass("tree-open") ? this.populate(n, !1) : this.populate(n, !0), this.$element.trigger("refreshedFolder.fu.tree", t.data())
        }
    }).closeAll = o.prototype.collapse, o.prototype.openFolder = o.prototype.discloseFolder, o.prototype.getValue = o.prototype.selectedItems, c.fn.tree = function(s) {
        var i, r = Array.prototype.slice.call(arguments, 1),
            e = this.each(function() {
                var e = c(this),
                    t = e.data("fu.tree"),
                    n = "object" == typeof s && s;
                t || e.data("fu.tree", t = new o(this, n)), "string" == typeof s && (i = t[s].apply(t, r))
            });
        return void 0 === i ? e : i
    }, c.fn.tree.defaults = {
        dataSource: function(e, t) {},
        multiSelect: !1,
        cacheItems: !0,
        folderSelect: !0,
        itemSelect: !0,
        disclosuresUpperLimit: 4
    }, c.fn.tree.Constructor = o, c.fn.tree.noConflict = function() {
        return c.fn.tree = e, this
    }
});