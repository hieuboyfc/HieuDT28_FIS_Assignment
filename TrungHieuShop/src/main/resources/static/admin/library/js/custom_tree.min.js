/*!
 * tree custom by nghianh12 v1.0.0
 */
if ("undefined" == typeof jQuery) throw new Error("JavaScript requires jQuery");
"ace" in window || (window.ace = {}), "helper" in window.ace || (window.ace.helper = {}), "vars" in window.ace || (window.ace.vars = {}), window.ace.vars.icon = " ace-icon ", window.ace.vars[".icon"] = ".ace-icon",
    function(o, e) {
        o.unCamelCase = function(e) {
            return e.replace(/([a-z])([A-Z])/g, function(e, a, n) {
                return a + "-" + n.toLowerCase()
            })
        }, o.strToVal = function(e) {
            var a = e.match(/^(?:(true)|(false)|(null)|(\-?[\d]+(?:\.[\d]+)?)|(\[.*\]|\{.*\}))$/i),
                n = e;
            if (a)
                if (a[1]) n = !0;
                else if (a[2]) n = !1;
                else if (a[3]) n = null;
                else if (a[4]) n = parseFloat(e);
                else if (a[5]) try {
                    n = JSON.parse(e)
                } catch (e) {}
            return n
        }, o.getAttrSettings = function(e, a, n) {
            if (e) {
                var r = a instanceof Array ? 1 : 2;
                n = "data-" + (n = n ? n.replace(/([^\-])$/, "$1-") : "");
                var i = {};
                for (var c in a)
                    if (a.hasOwnProperty(c)) {
                        var t, s = 1 == r ? a[c] : c,
                            l = o.unCamelCase(s.replace(/[^A-Za-z0-9]{1,}/g, "-")).toLowerCase();
                        if (!(t = e.getAttribute(n + l))) continue;
                        i[s] = o.strToVal(t)
                    } return i
            }
        }
    }(ace.helper), window.jQuery, ace.vars.US_STATES = [], window.jQuery,
    function(c, e) {
        c.fn.aceTree = c.fn.ace_tree = function(r) {
            var i = {
                "open-icon": ace.vars.icon + "fa fa-folder-open",
                "close-icon": ace.vars.icon + "fa fa-folder",
                "toggle-icon": ace.vars.icon + "fa fa-play",
                "selected-icon": ace.vars.icon + "fa fa-check",
                "unselected-icon": ace.vars.icon + "fa fa-times",
                "base-icon": ace.vars.icon + "fa",
                "folder-open-icon": "fa fa-plus-square-o",
                "folder-close-icon": "fa fa-plus-minus-o",
                loadingHTML: "Loading...",
                discloseAll: true
            };
            return this.each(function() {
                var e = ace.helper.getAttrSettings(this, i),
                    a = c.extend({}, i, r, e),
                    n = c(this);
                n.addClass("tree").attr("role", "tree"),
                n.html('<li class="tree-branch hide" data-template="treebranch" role="treeitem" aria-expanded="false">' + (a.folderSelect ? '<i class="icon-caret ' + a["folder-open-icon"] + '"></i>&nbsp;' : "") + '<div class="tree-branch-header"><span class="tree-branch-name"><i class="icon-folder ' + a["close-icon"] + ' glyphicon-folder-close"></i> <span class="tree-label"></span> </span> </div> <ul class="tree-branch-children hide" role="group"></ul> <div class="tree-loader" role="alert">' + a.loadingHTML + '</div> </li> <li class="tree-item hide" data-template="treeitem" role="treeitem"> <span class="tree-item-name"> ' + (null == a["unselected-icon"] ? "" : '<i class="icon-item ' + a["unselected-icon"] + '"></i>') + ' <span class="tree-label"></span> </span> </li>'),
                n.addClass(1 == a.selectable ? "tree-selectable" : "tree-unselectable"),
                n.tree(a)
            }), this
        }
    }(window.jQuery);